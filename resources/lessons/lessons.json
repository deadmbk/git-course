[
  {
    "id": 1,
    "title": "Konfiguracja środowiska",
    "stages": [
      {
        "command": "git config --global user.email \"you@example_email.com\"",
        "description": "Zanim zaczniesz pracę z projektem musisz skonfigurować gita, tak aby wiadomo było kto wprowadza zmiany. Zrobimy to ustawiając email oraz nazwę użytkownika za pomocą komendy \"git config\". Zaczniemy od ustawienia adresu email. Użyj komendy \"git config\" w celu wprowadzenia adresu: you@example_email.com",
        "tooltip": "Użyj polecenia 'git config --global user.email \"you@example_email.com\"'",
        "error": "Użyj polecenia 'git config --global user.email \"you@example_email.com\"'!",
        "prerequisites": ["lesson1"]
      },
	  {
        "command": "git config --global user.name \"your_name\"",
        "description": "Po ustawieniu adresu email przechodzimy do wpisania nazwy użytkownika. Należy teraz wykorzystać komendę \"git config\", tak aby wprowadzić nazwę użytkownika: your_name",
        "tooltip": "Wywołaj polecenie 'git config --global user.name \"your_name\"', aby ustawić nazwę użytkownika",
        "error": "Użyj polecenia 'git config --global user.name \"your_name\"'!"
      }
    ]
  },
  {
    "id": 2,
    "title": "Wezwanie pomocy!",
    "stages": [
      {
        "command": ["git help", "git --help"],
        "description": "Help pozwala na znalezienie informacji i opisu na temat komend użwanych w programie. Jeśli nie podamy żadnej konkretnej komedy, odnośnie której chcemy uzyskać informacje, to zostanie wyświetlony opis narzędzia git oraz lista najczęściej wykorzystywanych komend",
        "tooltip": "Wywołaj polecenie 'git help', aby wyświetlić informacje na temat dostępnej pomocy.",
        "error": "Wywołaj polecenie 'git help'!",
        "prerequisites": ["lesson2"]
      },
	  {
        "command": "git help status",
        "availableCommands": ["git help", "git --help"],
        "description": "Help pozwala na znalezienie informacji i opisu na temat komend użwanych w programie. Jeśli nie podamy żadnej konkretnej komedy, odnośnie której chcemy uzyskać informacje, to zostanie wyświetlony opis narzędzia git oraz lista najczęściej wykorzystywanych komend",
        "tooltip": "Wywołaj polecenie 'git help status', aby wyświetlić szczegółowe informacje odnośnie komendy 'git status'",
        "error": "Wywołaj polecenie 'git help status' command!"
      }
    ]
  },
  {
    "id": 3,
    "title": "Inicjalizacja projektu",
    "stages": [
      {
        "command": "git init",
        "availableCommands": ["git help init", "git --help init"],
        "description": "Komenda 'git init' powoduje założenie nowego projektu w folderze, w którym aktualnie się znajdujemy i śledzenie zmian w tym folderze przez narzędzie Git",
        "tooltip": "Użyj komendy 'git init', aby zainicjalizować nowy projekt git",
        "error": "Wywołaj polecenie 'git init'!",
        "prerequisites": ["lesson3"]
      },
      {
        "command": "git status",
        "availableCommands": ["git help status", "git --help status"],
        "description": "Komenda status powoduje wyświetlenie informacji na temat zmian w aktywnym folderze",
        "tooltip": "Użyj polecenia 'git status', aby sprawdzić status",
        "error": "Wywołaj polecenie 'git status'!"
      }
    ]
  },
  {
    "id": 4,
    "title": "Twój pierwszy commit",
    "stages": [
      {
        "command": "git status",
        "availableCommands": ["git help status", "git --help status"],
        "description": "Dodaliśmy nowy plik tekstowy do Twojego repozytorium o nazwie document.txt. Żeby dowiedzieć się o tym na własną rękę użyj poznanej już komendy 'git status'. Wyświetlony zostanie stan aktualnie śledzonego projektu. Będzie to lista plików gotowych do zacommitowania oraz informacje o tym, które pliki nie są jeszcze śledzone",
        "tooltip": "Użyj poznanej wcześniej komendy 'git status'",
        "error": "Wywołaj polecenie 'git status'!",
        "prerequisites": ["lesson4"]
      },
      {
        "command": ["git add document.txt", "git add *.txt", "git add *"],
        "availableCommands": ["git help add", "git --help add", "git status"],
        "description": "Jak widzisz, Git nie śledzi zmian dokonanych w obrębie pliku 'document.txt'. Musimy zmienić to zachowanie przez dodanie go do repozytorium poprzez komendę 'git add'",
        "tooltip": "Użyj komendy 'git add document.txt' aby spowodować że nowy plik 'document.txt' będzie od tej pory śledzony przez narzędzie Git",
        "error": "Wywołaj polecenie 'git add document.txt'!"
      },
      {
        "command": "git status",
        "availableCommands": ["git help status", "git --help status"],
        "description": "Świetnie! Teraz wywołaj ponownie 'git status', żeby sprawdzić czy wszystko przebiegło w porządku.",
        "tooltip": "Użyj komendy 'git status'",
        "error": "Wywołaj polecenie 'git status'!"
      },
	  {
        "command": "git commit -m \"first commit\"",
        "availableCommands": ["git help commit", "git --help commit"],
        "description": "Skoro plik 'document.txt' został dodany do śledzenia to nastąpił czas, aby zacommitować zmiany wprowadzone w projekcie. Służy do tego komenda 'git commit'",
        "tooltip": "Użyj komendy 'git commit -m \"first commit\"'",
        "error": "Wywołaj polecenie 'git commit -m \"first commit\"'!"
      },
	  {
        "command": "git status",
        "availableCommands": ["git help status", "git --help status"],
        "description": "Teraz należy sprawdzić czy plik został zacommitowany. Ponownie wykonajmy polecenie 'git status'",
        "tooltip": "Użyj komendy 'git status",
        "error": "Wywołaj polecenie 'git status'!"
      }
    ]
  },
  {
    "id": 5,
    "title": "Wprowadź więcej zmian!",
    "stages": [
      {
        "command": "git status",
        "availableCommands": ["git help status", "git --help status"],
        "description": "Aktualnie wprowadziliśmy do projektu kilka zmian. Zostały dodane dodatkowe pliki A.txt, B.txt oraz C.txt, które nie są śledzone, a także zmieniła się zawartość pliku 'document.txt'. Wywołaj polecenie 'git status', aby przekonać się że zmiany faktycznie miały miejsce",
        "tooltip": "Użyj komendy 'git status'",
        "error": "Wywołaj polecenie 'git status'!",
        "prerequisites": ["lesson5"]
      },
	  {
        "command": "git add -A",
        "availableCommands": ["git help add", "git --help add", "git status"],
        "description": "Jak się przekonałeś, pliki uległy zmianie. Należy teraz dodać je do projektu oraz zatwierdzić zmiany. Używamy do tego po raz kolejny komendy 'git add', ale razem z opcją -A, po to aby dodać wszystkie zmiany naraz, bez konieczności wpisywania po kolei wszystkich plików",
        "tooltip": "Użyj komendy 'git add -A",
        "error": "Wywołaj polecenie 'git add -A'!"
      },
	  {
        "command": "git commit -m \"second commit\"",
        "availableCommands": ["git help commit", "git --help commit", "git status"],
        "description": "Zatwiedzone zmiany commitujemy dzieki komendzie 'git commit'",
        "tooltip": "Użyj komendy 'git commit -m \"second commit\"",
        "error": "Wywołaj polecenie git commit -m \"second commit\"!"
      },
	  {
        "command": "git status",
        "availableCommands": ["git help status", "git --help status"],
        "description": "Aby sprawdzić czy wszystko się powiodło wywołujemy po raz kolejny komendę 'git status'",
        "tooltip": "Użyj komendy 'git status'",
        "error": "Wywołaj polecenie 'git status'!"
      }
    ]
  },
  {
    "id": 6,
    "title": "Pokaż mi logi!",
    "stages": [
      {
        "command": "git log",
        "availableCommands": ["git help log", "git --help log"],
        "description": "Ponieważ w naszym projekcie może uczestniczyć wiele osób i wiele z nich może do niego dodawać zawartość to istnieje narzędzie, które pozwala sprawdzić listę zmian związanych z projektem. Użyjemy teraz komendy 'git log' która wylistuje nasze commity",
        "tooltip": "Użyj komendy 'git log'",
        "error": "Wywołaj polecenie 'git log'!",
        "prerequisites": ["lesson6"]
      }
    ]
  },
  {
    "id": 7,
    "title": "Cofnij zmiany",
    "stages": [
      {
        "command": "git status",
        "availableCommands": ["git help status", "git --help status", "git log"],
        "description": "Czasem może się zdarzyć, że nie chcemy commitować pewnych zmian i należy usunąć je z kolejnej zmiany. Służy do tego komenda 'git checkout'. Aktualnie zmienił się w projekcie jeden z plików i został dodany do zmiany za pomocą komendy 'git add'. Sprawdź czy plik faktycznie został zmodyfikowany wykorzystując polecenie 'git status'",
        "tooltip": "Użyj komendy 'git status'",
        "error": "Wywołaj polecenie 'git status'!",
        "prerequisites": ["lesson7"]
      },
      {
        "command": "git reset document.txt",
        "availableCommands": ["git help reset", "git --help reset", "git status", "git log"],
        "description": "Czasem może się zdarzyć, że nie chcemy commitować pewnych zmian i należy usunąć je z kolejnej zmiany. Służy do tego komenda 'git checkout'. Aktualnie zmienił się w projekcie jeden z plików i został dodany do zmiany za pomocą komendy 'git add'. Sprawdź czy plik faktycznie został zmodyfikowany wykorzystując polecenie 'git status'",
        "tooltip": "Użyj komendy 'git reset document.txt'!",
        "error": "Wywołaj polecenie 'git reset'!"
      },
	  {
        "command": "git checkout document.txt",
        "availableCommands": ["git status", "git help checkout", "git --help checkout", "git log"],
        "description": "Wiedząc, że plik jest zakwalifikowany do przyszłego commita, wykorzystaj komendę 'git checkout', aby przywrócić zmiany wprowadzone w pliku i nie wysyłać go do repozytorium w przyszłym commicie",
        "tooltip": "Użyj komendy 'git checkout document.txt'",
        "error": "Wywołaj polecenie'git checkout'!"
      },
	  {
        "command": "git status",
        "availableCommands": ["git help status", "git --help status", "git log"],
        "description": "Możesz teraz sprawdzić za pomocą komendy status czy plik faktycznie został usunięty z listy",
        "tooltip": "Użyj komendy 'git status'!",
        "error": "Wywołaj polecenie 'git status'!"
      }
    ]
  },
  {
    "id": 8,
    "title": "Zdalne repozytorium",
    "stages": [
      {
        "command": "git remote add origin D:/git-course-repo/git-repo",
        "availableCommands": ["git help remote", "git --help remote", "git remote -v", "git log", "git status"],
        "description": "Aby dodać zewnętrzne repozytorium używamy komendy 'git remote add <nazwa> <url>/<directory>'",
        "tooltip": "Użyj komendy 'git remote add origin D:/git-course-repo/git-repo'",
        "error": "Wywołaj polecenie 'git remote add origin D:/git-course-repo/git-repo'!",
        "prerequisites": ["lesson8"]
      },
	  {
        "command": "git remote -v",
        "availableCommands": ["git help remote", "git --help remote", "git status", "git log"],
        "description": "Po wywołaniu poprzedniej komendy możemy sprawdzić powodzenie operacji poprzez wylistowanie listy repozytoriów. W tym celu należy użyć komendy 'git remote' z odpowiednią opcją",
        "tooltip": "Użyj komendy 'git remote -v'",
        "error": "Wywołaj polecenie 'git remote -v'!"
      }
    ]
  },
  {
    "id": 9,
    "title": "Pobranie danych z repozytorium",
    "stages": [
      {
        "command": "git status",
        "availableCommands": ["git help status", "git --help remote", "git remote -v", "git log"],
        "description": "W tej lekcji pobierzemy dane z repozytorium dodanego w poprzedniej lekcji. Najpierw jednak, aby zaobserwować zmiany sprawdzimy aktualny stan folderu za pomocą komendy 'git status'",
        "tooltip": "Użyj komendy 'git status'",
        "error": "Wywołaj polecenie 'git status'!",
        "prerequisites": ["lesson9"]
      },
	  {
        "command": "git pull origin master",
        "availableCommands": ["git remote -v", "git help pull", "git --help pull", "git status", "git log"],
        "description": "W tym momencie pobierzemy nowe pliki znajdujące się w repozytorim zdalnym. Do tego wykorzystamy komendę 'git pull' podając nazwę repozytorium, z którego chcemy pobrać dane",
        "tooltip": "Użyj komendy 'git pull origin master'",
        "error": "Wywołaj polecenie 'git pull origin' command!"
      },
	  {
        "command": "git status",
        "availableCommands": ["git remote -v", "git help status", "git --help status", "git log"],
        "description": "Na koniec, za pomocą komendy 'git status' sprawdźmy czy nowe pliki pojawiły się w folderze",
        "tooltip": "Użyj komendy 'git status'",
        "error": "Wywołaj polecenie 'git status'!"
      }
    ]
  },
  {
    "id": 10,
    "title": "Wysyłanie własnych zmian",
    "stages": [
	  {
        "command": "git status",
        "availableCommands": ["git help status", "git --help remote", "git remote -v", "git log"],
        "description": "W dokumencie A.txt nastąpiły pewne zmiany, które chcemy przenieść do zewnętrznego repozytorium. Sprawdź czy faktycznie zmiany miały miejsce wykorzystując komendę 'git status'",
        "tooltip": "Użyj komendy 'git status'",
        "error": "Wywołaj polecenie 'git status'!",
        "prerequisites": ["lesson10"]
      },
      {
        "command": ["git add -A", "git add A.txt", "git add *.txt", "git add *"],
        "availableCommands": ["git add -A", "git add A.txt", "git help status", "git --help remote", "git remote -v", "git log"],
        "description": "Dodaj wszystkie zmienione pliki (A.txt) do następnej zmiany",
        "tooltip": "Użyj komendy 'git add -A'",
        "error": "Wywołaj polecenie 'git add -A!"
      },
      {
        "command": "git commit -m \"third commit\"",
        "availableCommands": ["git help commit", "git --help commit", "git remote -v", "git status", "git log"],
        "description": "Zacommituj zmiany wywołując polecenie 'git commit'",
        "tooltip": "Użyj komendy 'git commit -m \"third commit\"",
        "error": "Wywołaj polecenie 'git commit -m \"third commit\"!"
      },
      {
        "command": "git push -u origin master",
        "availableCommands": ["git help push", "git --help push", "git remote -v", "git status", "git log"],
        "description": "Dodajemy zmiany w zewnętrzym repozytorium za pomocą komendy 'git push'",
        "tooltip": "Użyj komendy 'git push -u origin master'",
        "error": "Wywołaj polecenie 'git push -u origin master'!"
      }
    ]
  },
  {
    "id": 11,
    "title": "Jak używać Branch-y",
    "stages": [
      {
        "command": "git ls-files",
        "availableCommands": ["git status", "git help status", "git help ls-files"],
        "description": "W tej lekcji nauczymy się używać polecenia branch- zmieniać branch(gałąź) w projekcie. W tym przypadku ujawnia się nieliniowość Git-a. Zanim stworzymy nowy branch wylistujemy wszystkie pliki aby przekonać się z czego składa się projekt. Do tej czynności potrzebujemy komendy 'ls-files'",
        "tooltip": "Użyj komendy 'git ls-files'",
        "error": "Wywołaj polecenie 'git ls-files'!",
        "prerequisites": ["lesson11"]
      },
      {
        "command": "git branch cleared",
        "availableCommands": ["git help branch", "git --help branch", "git remote -v", "git status", "git log"],
        "description": "Stworzenie nowego brancha odbywa się poprzez wywołanie komendy 'branch'. Stwórz teraz nową gałąź projektu o nazwie 'cleared' wykorzystując do tego wspomnianą komendę.",
        "tooltip": "Użyj komendy 'git branch cleared'",
        "error": "Wywołaj polecenie 'git branch cleared'!"
      },
      {
        "command": "git checkout cleared",
        "availableCommands": ["git help checkout", "git --help checkout", "git status", "git log", "git ls-files", "git help ls-files"],
        "description": "Kiedy już stworzyliśmy nową gałąź, przeniesiemy się teraz do niej aby wprowadzić zmiany w repozytorium. Dokonamy tego wykorzystując komendę 'checkout' i podając nazwę brancha do którego chcemy się przenieść.",
        "tooltip": "Użyj komendy 'git checkout cleared'",
        "error": "Wywołaj polecenie 'git checkout cleared'!"
      },
      {
        "command": "git rm A.txt",
        "availableCommands": ["git help rm", "git --help rm", "git status", "git log", "git ls-files", "git help ls-files"],
        "description": "Aktualnie znajdujemy się w nowej gałęzi projektu o nazwie 'cleared'. Zmowyfikujemy teraz zawartośc projektu poprzez usunięcie wszytkich plików. Wykonaj polecenie 'rm'",
        "tooltip": "Użyj komendy 'git rm A.txt'",
        "error": "Wywołaj polecenie 'git rm A.txt'!"
      },
      {
        "command": "git commit -m \"my next commit\"",
        "availableCommands": ["git help commit", "git --help commit", "git status", "git log"],
        "description": "Nadszedł czas na zacommitowanie wprowadzonych zmian. Wykonaj to poprzez polecenie commit.",
        "tooltip": "Użyj komendy 'git commit -m \"my next commit\"'",
        "error": "Wywołaj polecenie 'git commit -m \"my next commit\"'!"
      },
      {
        "command": "git ls-files",
        "availableCommands": ["git help ls-files", "git --help ls-files", "git status", "git log"],
        "description": "Po usunięciu wszystkich plików w poprzednich krokach sprawdzamy stan folderu wylistowując znajdujące się w nim pliki i sprawdzając czy faktycznie zostały usunięte. Osiągniemy to wykonując ponownie polecenie git 'ls-files'.",
        "tooltip": "Użyj komendy 'git ls-files'",
        "error": "Wywołaj polecenie 'git ls-files'!"
      },
      {
        "command": "git checkout master",
        "availableCommands": ["git help checkout", "git --help checkout", "git status", "git log", "git ls-files", "git help ls-files"],
        "description": "Przechodzimy teraz do oryginalnej gałezi o nazwie 'master'. Osiągniemy to wykorzystując polecenie checkout i podając nazwę brancha, do którego chcemy się przenieść.",
        "tooltip": "Użyj komendy 'git checkout master'",
        "error": "Wywołaj polecenie 'git checkout master'!"
      },
      {
        "command": "git ls-files",
        "availableCommands": ["git help ls-files", "git --help ls-files", "git status", "git log"],
        "description": "Na sam koniec będąc już w branchu 'master', wykorzystamy kolejny raz komendę ls-files aby przekonać się że stan folderu jest inny od brancha 'cleared'",
        "tooltip": "Użyj komendy 'git ls-files'",
        "error": "Wywołaj polecenie 'git ls-files'!"
      }
    ]
  },
  {
    "id": 12,
    "title": "Połączenie branchy",
    "stages": [
      {
        "command": "git branch",
        "availableCommands": ["git help branch", "git --help branch", "git status", "git log", "git help status"],
        "description": "W poprzedniej lekcji utworzyliśmy nowy branch w którym usunęliśmy plik A.txt i zacommitowaliśmy te zmiany. Przekonaliśmy się też o tym że oba branche (oryginalny i o nazwie 'cleared') różnią się teraz zawartością plików. W tym momencie wywołaj samą komendę 'branch' aby wylistować istniejące branche. Z listy wynika że jesteśmy w branchu o nazwie 'master' (gwiazdka obok nazwy gałęzi).",
        "tooltip": "Użyj komendy 'git branch'",
        "error": "Wywołaj polecenie 'git branch'!",
        "prerequisites": ["lesson12"]
      },
	  {
        "command": "git merge cleared",
        "availableCommands": ["git help merge", "git --help merge", "git status", "git log", "git help status", "git ls-files"],
        "description": "W tym momencie połączym ze sobą branche 'master' oraz 'cleared'. Użyj do tego komendy 'merge'",
        "tooltip": "Użyj komendy 'git branch'",
        "error": "Wywołaj polecenie 'git branch'!"
      },
	  {
        "command": "git branch",
        "availableCommands": ["git help branch", "git --help branch", "git status", "git log", "git help status"],
        "description": "Ponieważ połączyliśmy już branche 'master' i 'cleared' przekonamy się o tym wykorzystując samą komendę branch, która wylistuje wszystkie branche.",
        "tooltip": "Użyj komendy 'git branch'",
        "error": "Wywołaj polecenie 'git branch'!"
      },
      {
        "command": "git ls-files",
        "availableCommands": ["git help ls-files", "git --help ls-files", "git status", "git log"],
        "description": "Na sam koniec sprawdzimy jeszcze stan plików za pomocą polecenia 'ls-files'. Widać że branche połączyły się i w gałęzi 'master' nie ma już pliku 'A.txt'.",
        "tooltip": "Użyj komendy 'git ls-files'",
        "error": "Wywołaj polecenie 'git ls-files'!"
      }
    ]
  },
  {
    "id": 13,
    "title": "[GIT FLOW] Inicjowanie GIT FLOW",
    "stages": [
      {
        "command": "git flow init -d",
        "availableCommands": ["git flow init help", "git flow init --help", "git remote -v", "git log", "git status"],
        "description": "Aby zainicjować git flow w aktualnym folderze należy wykonać polecenie 'git flow init -d'",
        "tooltip": "Użyj komendy 'git flow init -d'",
        "error": "Wywołaj polecenie 'git flow init -d'!",
        "prerequisites": ["lesson13"]
      }
    ]
  },
  {
    "id": 14,
    "title": "[GIT FLOW] Feature branch",
    "stages": [
      {
        "command": "git flow feature start T1",
        "availableCommands": ["git flow feature help", "git flow feature --help", "git remote -v", "git log", "git status"],
        "description": "Tworzenie nowych funkcjonalności w projekcie ułatwią nam tzw. \"feature branche\", na których będziemy umieszczać nasze zmiany. Feature branch tworzy się poleceniem 'git flow feature start [nazwa brancha]', które tworzy go na bazie brancha develop i od razu się do niego przełącza",
        "tooltip": "Użyj komendy 'git flow feature start T1'",
        "error": "Wywołaj polecenie 'git flow feature start T1'!",
        "prerequisites": ["lesson14"]
      },
      {
        "command": "git flow feature publish T1",
        "availableCommands": ["git flow feature help", "git flow feature --help", "git remote -v", "git log", "git status"],
        "description": "Aby stworzony feature branch był widoczny dla innych osób pracujacych nad projektem należy go obublikować w repozytorium. Służy do tego polecenie 'git flow feature publish [nazwa brancha]'",
        "tooltip": "Użyj komendy 'git flow feature publish T1'",
        "error": "Wywołaj polecenie 'git flow feature publish T1'!"
      },
      {
        "command": "git flow feature finish T1",
        "availableCommands": ["git flow feature help", "git flow feature --help", "git remote -v", "git log", "git status"],
        "description": "Po zakończeniu dewelopowania funkcjonalności, branch powinien zostać zmergowany do brancha develop i usunięty. Można to osiągnąć dzięki komendzie 'git flow feature finish [nazwa brancha]'",
        "tooltip": "Użyj komendy 'git flow feature finish T1'",
        "error": "Wywołaj polecenie 'git flow feature finish T1'!"
      }
    ]
  }
]
